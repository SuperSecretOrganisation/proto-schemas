name: Generate Proto Files
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  delete:
permissions:
  contents: write
  pull-requests: write
jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Buf
        uses: bufbuild/buf-action@v1
        with:
          token: ${{ secrets.BUF_TOKEN }}
      - run: buf dep update
      - run: buf generate
      - run: buf lint
      - run: buf push
        if: github.ref == 'refs/heads/main'

      - name: Commit and push generated files
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add gen/ lib/
          git diff --staged --quiet || git commit -m "chore: auto-generate proto files [skip ci]"
          git push

      - name: Create version tag from commit message
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Extract version tag from commit message if it contains "v2.x.x" pattern
          COMMIT_MSG=$(git log -1 --pretty=%B)
          VERSION_TAG=$(echo "$COMMIT_MSG" | grep -oP 'v2\.\d+\.\d+' || echo "")

          if [ -n "$VERSION_TAG" ]; then
            echo "Found version tag: $VERSION_TAG"

            # Pull latest changes to get the auto-generated files commit
            git pull origin main

            # Check if tag already exists
            if git rev-parse "$VERSION_TAG" >/dev/null 2>&1; then
              echo "Tag $VERSION_TAG already exists, deleting remote tag first"
              git push origin :refs/tags/$VERSION_TAG || true
              git tag -d $VERSION_TAG || true
            fi

            # Create and push new tag on the latest commit (with generated files)
            git tag $VERSION_TAG
            git push origin $VERSION_TAG
            echo "Created and pushed tag: $VERSION_TAG on commit $(git rev-parse HEAD)"
          else
            echo "No version tag found in commit message"
          fi
