// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/user_xp/v1/user_xp.proto

package userxppb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserXPService_GetUserXP_FullMethodName      = "/proto.user_xp.v1.UserXPService/GetUserXP"
	UserXPService_AddXP_FullMethodName          = "/proto.user_xp.v1.UserXPService/AddXP"
	UserXPService_GetLeaderboard_FullMethodName = "/proto.user_xp.v1.UserXPService/GetLeaderboard"
	UserXPService_GetUserLevel_FullMethodName   = "/proto.user_xp.v1.UserXPService/GetUserLevel"
)

// UserXPServiceClient is the client API for UserXPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserXPServiceClient interface {
	GetUserXP(ctx context.Context, in *GetUserXPRequest, opts ...grpc.CallOption) (*GetUserXPResponse, error)
	AddXP(ctx context.Context, in *AddXPRequest, opts ...grpc.CallOption) (*AddXPResponse, error)
	GetLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*GetLeaderboardResponse, error)
	GetUserLevel(ctx context.Context, in *GetUserLevelRequest, opts ...grpc.CallOption) (*GetUserLevelResponse, error)
}

type userXPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserXPServiceClient(cc grpc.ClientConnInterface) UserXPServiceClient {
	return &userXPServiceClient{cc}
}

func (c *userXPServiceClient) GetUserXP(ctx context.Context, in *GetUserXPRequest, opts ...grpc.CallOption) (*GetUserXPResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserXPResponse)
	err := c.cc.Invoke(ctx, UserXPService_GetUserXP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userXPServiceClient) AddXP(ctx context.Context, in *AddXPRequest, opts ...grpc.CallOption) (*AddXPResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddXPResponse)
	err := c.cc.Invoke(ctx, UserXPService_AddXP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userXPServiceClient) GetLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*GetLeaderboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLeaderboardResponse)
	err := c.cc.Invoke(ctx, UserXPService_GetLeaderboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userXPServiceClient) GetUserLevel(ctx context.Context, in *GetUserLevelRequest, opts ...grpc.CallOption) (*GetUserLevelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserLevelResponse)
	err := c.cc.Invoke(ctx, UserXPService_GetUserLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserXPServiceServer is the server API for UserXPService service.
// All implementations must embed UnimplementedUserXPServiceServer
// for forward compatibility.
type UserXPServiceServer interface {
	GetUserXP(context.Context, *GetUserXPRequest) (*GetUserXPResponse, error)
	AddXP(context.Context, *AddXPRequest) (*AddXPResponse, error)
	GetLeaderboard(context.Context, *GetLeaderboardRequest) (*GetLeaderboardResponse, error)
	GetUserLevel(context.Context, *GetUserLevelRequest) (*GetUserLevelResponse, error)
	mustEmbedUnimplementedUserXPServiceServer()
}

// UnimplementedUserXPServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserXPServiceServer struct{}

func (UnimplementedUserXPServiceServer) GetUserXP(context.Context, *GetUserXPRequest) (*GetUserXPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserXP not implemented")
}
func (UnimplementedUserXPServiceServer) AddXP(context.Context, *AddXPRequest) (*AddXPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddXP not implemented")
}
func (UnimplementedUserXPServiceServer) GetLeaderboard(context.Context, *GetLeaderboardRequest) (*GetLeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaderboard not implemented")
}
func (UnimplementedUserXPServiceServer) GetUserLevel(context.Context, *GetUserLevelRequest) (*GetUserLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLevel not implemented")
}
func (UnimplementedUserXPServiceServer) mustEmbedUnimplementedUserXPServiceServer() {}
func (UnimplementedUserXPServiceServer) testEmbeddedByValue()                       {}

// UnsafeUserXPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserXPServiceServer will
// result in compilation errors.
type UnsafeUserXPServiceServer interface {
	mustEmbedUnimplementedUserXPServiceServer()
}

func RegisterUserXPServiceServer(s grpc.ServiceRegistrar, srv UserXPServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserXPServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserXPService_ServiceDesc, srv)
}

func _UserXPService_GetUserXP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserXPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserXPServiceServer).GetUserXP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserXPService_GetUserXP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserXPServiceServer).GetUserXP(ctx, req.(*GetUserXPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserXPService_AddXP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddXPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserXPServiceServer).AddXP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserXPService_AddXP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserXPServiceServer).AddXP(ctx, req.(*AddXPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserXPService_GetLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserXPServiceServer).GetLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserXPService_GetLeaderboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserXPServiceServer).GetLeaderboard(ctx, req.(*GetLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserXPService_GetUserLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserXPServiceServer).GetUserLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserXPService_GetUserLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserXPServiceServer).GetUserLevel(ctx, req.(*GetUserLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserXPService_ServiceDesc is the grpc.ServiceDesc for UserXPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserXPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.user_xp.v1.UserXPService",
	HandlerType: (*UserXPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserXP",
			Handler:    _UserXPService_GetUserXP_Handler,
		},
		{
			MethodName: "AddXP",
			Handler:    _UserXPService_AddXP_Handler,
		},
		{
			MethodName: "GetLeaderboard",
			Handler:    _UserXPService_GetLeaderboard_Handler,
		},
		{
			MethodName: "GetUserLevel",
			Handler:    _UserXPService_GetUserLevel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user_xp/v1/user_xp.proto",
}
