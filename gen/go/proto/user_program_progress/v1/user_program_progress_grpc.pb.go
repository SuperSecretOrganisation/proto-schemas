// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/user_program_progress/v1/user_program_progress.proto

package userprogramprogresspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserProgramProgressService_GetActiveProgram_FullMethodName   = "/proto.user_program_progress.v1.UserProgramProgressService/GetActiveProgram"
	UserProgramProgressService_GetProgressHistory_FullMethodName = "/proto.user_program_progress.v1.UserProgramProgressService/GetProgressHistory"
	UserProgramProgressService_UpdateProgress_FullMethodName     = "/proto.user_program_progress.v1.UserProgramProgressService/UpdateProgress"
	UserProgramProgressService_AbandonProgram_FullMethodName     = "/proto.user_program_progress.v1.UserProgramProgressService/AbandonProgram"
	UserProgramProgressService_GetWorkoutHistory_FullMethodName  = "/proto.user_program_progress.v1.UserProgramProgressService/GetWorkoutHistory"
)

// UserProgramProgressServiceClient is the client API for UserProgramProgressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserProgramProgressServiceClient interface {
	GetActiveProgram(ctx context.Context, in *GetActiveProgramRequest, opts ...grpc.CallOption) (*GetActiveProgramResponse, error)
	GetProgressHistory(ctx context.Context, in *GetProgressHistoryRequest, opts ...grpc.CallOption) (*GetProgressHistoryResponse, error)
	UpdateProgress(ctx context.Context, in *UpdateProgressRequest, opts ...grpc.CallOption) (*UpdateProgressResponse, error)
	AbandonProgram(ctx context.Context, in *AbandonProgramRequest, opts ...grpc.CallOption) (*AbandonProgramResponse, error)
	GetWorkoutHistory(ctx context.Context, in *GetWorkoutHistoryRequest, opts ...grpc.CallOption) (*GetWorkoutHistoryResponse, error)
}

type userProgramProgressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserProgramProgressServiceClient(cc grpc.ClientConnInterface) UserProgramProgressServiceClient {
	return &userProgramProgressServiceClient{cc}
}

func (c *userProgramProgressServiceClient) GetActiveProgram(ctx context.Context, in *GetActiveProgramRequest, opts ...grpc.CallOption) (*GetActiveProgramResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActiveProgramResponse)
	err := c.cc.Invoke(ctx, UserProgramProgressService_GetActiveProgram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProgramProgressServiceClient) GetProgressHistory(ctx context.Context, in *GetProgressHistoryRequest, opts ...grpc.CallOption) (*GetProgressHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProgressHistoryResponse)
	err := c.cc.Invoke(ctx, UserProgramProgressService_GetProgressHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProgramProgressServiceClient) UpdateProgress(ctx context.Context, in *UpdateProgressRequest, opts ...grpc.CallOption) (*UpdateProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProgressResponse)
	err := c.cc.Invoke(ctx, UserProgramProgressService_UpdateProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProgramProgressServiceClient) AbandonProgram(ctx context.Context, in *AbandonProgramRequest, opts ...grpc.CallOption) (*AbandonProgramResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbandonProgramResponse)
	err := c.cc.Invoke(ctx, UserProgramProgressService_AbandonProgram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProgramProgressServiceClient) GetWorkoutHistory(ctx context.Context, in *GetWorkoutHistoryRequest, opts ...grpc.CallOption) (*GetWorkoutHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkoutHistoryResponse)
	err := c.cc.Invoke(ctx, UserProgramProgressService_GetWorkoutHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserProgramProgressServiceServer is the server API for UserProgramProgressService service.
// All implementations must embed UnimplementedUserProgramProgressServiceServer
// for forward compatibility.
type UserProgramProgressServiceServer interface {
	GetActiveProgram(context.Context, *GetActiveProgramRequest) (*GetActiveProgramResponse, error)
	GetProgressHistory(context.Context, *GetProgressHistoryRequest) (*GetProgressHistoryResponse, error)
	UpdateProgress(context.Context, *UpdateProgressRequest) (*UpdateProgressResponse, error)
	AbandonProgram(context.Context, *AbandonProgramRequest) (*AbandonProgramResponse, error)
	GetWorkoutHistory(context.Context, *GetWorkoutHistoryRequest) (*GetWorkoutHistoryResponse, error)
	mustEmbedUnimplementedUserProgramProgressServiceServer()
}

// UnimplementedUserProgramProgressServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserProgramProgressServiceServer struct{}

func (UnimplementedUserProgramProgressServiceServer) GetActiveProgram(context.Context, *GetActiveProgramRequest) (*GetActiveProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveProgram not implemented")
}
func (UnimplementedUserProgramProgressServiceServer) GetProgressHistory(context.Context, *GetProgressHistoryRequest) (*GetProgressHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgressHistory not implemented")
}
func (UnimplementedUserProgramProgressServiceServer) UpdateProgress(context.Context, *UpdateProgressRequest) (*UpdateProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProgress not implemented")
}
func (UnimplementedUserProgramProgressServiceServer) AbandonProgram(context.Context, *AbandonProgramRequest) (*AbandonProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbandonProgram not implemented")
}
func (UnimplementedUserProgramProgressServiceServer) GetWorkoutHistory(context.Context, *GetWorkoutHistoryRequest) (*GetWorkoutHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkoutHistory not implemented")
}
func (UnimplementedUserProgramProgressServiceServer) mustEmbedUnimplementedUserProgramProgressServiceServer() {
}
func (UnimplementedUserProgramProgressServiceServer) testEmbeddedByValue() {}

// UnsafeUserProgramProgressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserProgramProgressServiceServer will
// result in compilation errors.
type UnsafeUserProgramProgressServiceServer interface {
	mustEmbedUnimplementedUserProgramProgressServiceServer()
}

func RegisterUserProgramProgressServiceServer(s grpc.ServiceRegistrar, srv UserProgramProgressServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserProgramProgressServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserProgramProgressService_ServiceDesc, srv)
}

func _UserProgramProgressService_GetActiveProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProgramProgressServiceServer).GetActiveProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProgramProgressService_GetActiveProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProgramProgressServiceServer).GetActiveProgram(ctx, req.(*GetActiveProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProgramProgressService_GetProgressHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProgressHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProgramProgressServiceServer).GetProgressHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProgramProgressService_GetProgressHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProgramProgressServiceServer).GetProgressHistory(ctx, req.(*GetProgressHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProgramProgressService_UpdateProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProgramProgressServiceServer).UpdateProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProgramProgressService_UpdateProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProgramProgressServiceServer).UpdateProgress(ctx, req.(*UpdateProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProgramProgressService_AbandonProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbandonProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProgramProgressServiceServer).AbandonProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProgramProgressService_AbandonProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProgramProgressServiceServer).AbandonProgram(ctx, req.(*AbandonProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProgramProgressService_GetWorkoutHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkoutHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProgramProgressServiceServer).GetWorkoutHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProgramProgressService_GetWorkoutHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProgramProgressServiceServer).GetWorkoutHistory(ctx, req.(*GetWorkoutHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserProgramProgressService_ServiceDesc is the grpc.ServiceDesc for UserProgramProgressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserProgramProgressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.user_program_progress.v1.UserProgramProgressService",
	HandlerType: (*UserProgramProgressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActiveProgram",
			Handler:    _UserProgramProgressService_GetActiveProgram_Handler,
		},
		{
			MethodName: "GetProgressHistory",
			Handler:    _UserProgramProgressService_GetProgressHistory_Handler,
		},
		{
			MethodName: "UpdateProgress",
			Handler:    _UserProgramProgressService_UpdateProgress_Handler,
		},
		{
			MethodName: "AbandonProgram",
			Handler:    _UserProgramProgressService_AbandonProgram_Handler,
		},
		{
			MethodName: "GetWorkoutHistory",
			Handler:    _UserProgramProgressService_GetWorkoutHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user_program_progress/v1/user_program_progress.proto",
}
