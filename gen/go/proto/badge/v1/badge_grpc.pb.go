// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/badge/v1/badge.proto

package badgepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BadgeService_GetBadge_FullMethodName            = "/proto.badge.v1.BadgeService/GetBadge"
	BadgeService_ListBadges_FullMethodName          = "/proto.badge.v1.BadgeService/ListBadges"
	BadgeService_GetBadgesByCategory_FullMethodName = "/proto.badge.v1.BadgeService/GetBadgesByCategory"
	BadgeService_GetBadgesByLevel_FullMethodName    = "/proto.badge.v1.BadgeService/GetBadgesByLevel"
	BadgeService_CreateBadge_FullMethodName         = "/proto.badge.v1.BadgeService/CreateBadge"
	BadgeService_UpdateBadge_FullMethodName         = "/proto.badge.v1.BadgeService/UpdateBadge"
	BadgeService_DeleteBadge_FullMethodName         = "/proto.badge.v1.BadgeService/DeleteBadge"
)

// BadgeServiceClient is the client API for BadgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BadgeServiceClient interface {
	GetBadge(ctx context.Context, in *GetBadgeRequest, opts ...grpc.CallOption) (*GetBadgeResponse, error)
	ListBadges(ctx context.Context, in *ListBadgesRequest, opts ...grpc.CallOption) (*ListBadgesResponse, error)
	GetBadgesByCategory(ctx context.Context, in *GetBadgesByCategoryRequest, opts ...grpc.CallOption) (*GetBadgesByCategoryResponse, error)
	GetBadgesByLevel(ctx context.Context, in *GetBadgesByLevelRequest, opts ...grpc.CallOption) (*GetBadgesByLevelResponse, error)
	CreateBadge(ctx context.Context, in *CreateBadgeRequest, opts ...grpc.CallOption) (*CreateBadgeResponse, error)
	UpdateBadge(ctx context.Context, in *UpdateBadgeRequest, opts ...grpc.CallOption) (*UpdateBadgeResponse, error)
	DeleteBadge(ctx context.Context, in *DeleteBadgeRequest, opts ...grpc.CallOption) (*DeleteBadgeResponse, error)
}

type badgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBadgeServiceClient(cc grpc.ClientConnInterface) BadgeServiceClient {
	return &badgeServiceClient{cc}
}

func (c *badgeServiceClient) GetBadge(ctx context.Context, in *GetBadgeRequest, opts ...grpc.CallOption) (*GetBadgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBadgeResponse)
	err := c.cc.Invoke(ctx, BadgeService_GetBadge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badgeServiceClient) ListBadges(ctx context.Context, in *ListBadgesRequest, opts ...grpc.CallOption) (*ListBadgesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBadgesResponse)
	err := c.cc.Invoke(ctx, BadgeService_ListBadges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badgeServiceClient) GetBadgesByCategory(ctx context.Context, in *GetBadgesByCategoryRequest, opts ...grpc.CallOption) (*GetBadgesByCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBadgesByCategoryResponse)
	err := c.cc.Invoke(ctx, BadgeService_GetBadgesByCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badgeServiceClient) GetBadgesByLevel(ctx context.Context, in *GetBadgesByLevelRequest, opts ...grpc.CallOption) (*GetBadgesByLevelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBadgesByLevelResponse)
	err := c.cc.Invoke(ctx, BadgeService_GetBadgesByLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badgeServiceClient) CreateBadge(ctx context.Context, in *CreateBadgeRequest, opts ...grpc.CallOption) (*CreateBadgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBadgeResponse)
	err := c.cc.Invoke(ctx, BadgeService_CreateBadge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badgeServiceClient) UpdateBadge(ctx context.Context, in *UpdateBadgeRequest, opts ...grpc.CallOption) (*UpdateBadgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBadgeResponse)
	err := c.cc.Invoke(ctx, BadgeService_UpdateBadge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badgeServiceClient) DeleteBadge(ctx context.Context, in *DeleteBadgeRequest, opts ...grpc.CallOption) (*DeleteBadgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBadgeResponse)
	err := c.cc.Invoke(ctx, BadgeService_DeleteBadge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BadgeServiceServer is the server API for BadgeService service.
// All implementations must embed UnimplementedBadgeServiceServer
// for forward compatibility.
type BadgeServiceServer interface {
	GetBadge(context.Context, *GetBadgeRequest) (*GetBadgeResponse, error)
	ListBadges(context.Context, *ListBadgesRequest) (*ListBadgesResponse, error)
	GetBadgesByCategory(context.Context, *GetBadgesByCategoryRequest) (*GetBadgesByCategoryResponse, error)
	GetBadgesByLevel(context.Context, *GetBadgesByLevelRequest) (*GetBadgesByLevelResponse, error)
	CreateBadge(context.Context, *CreateBadgeRequest) (*CreateBadgeResponse, error)
	UpdateBadge(context.Context, *UpdateBadgeRequest) (*UpdateBadgeResponse, error)
	DeleteBadge(context.Context, *DeleteBadgeRequest) (*DeleteBadgeResponse, error)
	mustEmbedUnimplementedBadgeServiceServer()
}

// UnimplementedBadgeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBadgeServiceServer struct{}

func (UnimplementedBadgeServiceServer) GetBadge(context.Context, *GetBadgeRequest) (*GetBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBadge not implemented")
}
func (UnimplementedBadgeServiceServer) ListBadges(context.Context, *ListBadgesRequest) (*ListBadgesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBadges not implemented")
}
func (UnimplementedBadgeServiceServer) GetBadgesByCategory(context.Context, *GetBadgesByCategoryRequest) (*GetBadgesByCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBadgesByCategory not implemented")
}
func (UnimplementedBadgeServiceServer) GetBadgesByLevel(context.Context, *GetBadgesByLevelRequest) (*GetBadgesByLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBadgesByLevel not implemented")
}
func (UnimplementedBadgeServiceServer) CreateBadge(context.Context, *CreateBadgeRequest) (*CreateBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBadge not implemented")
}
func (UnimplementedBadgeServiceServer) UpdateBadge(context.Context, *UpdateBadgeRequest) (*UpdateBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBadge not implemented")
}
func (UnimplementedBadgeServiceServer) DeleteBadge(context.Context, *DeleteBadgeRequest) (*DeleteBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBadge not implemented")
}
func (UnimplementedBadgeServiceServer) mustEmbedUnimplementedBadgeServiceServer() {}
func (UnimplementedBadgeServiceServer) testEmbeddedByValue()                      {}

// UnsafeBadgeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BadgeServiceServer will
// result in compilation errors.
type UnsafeBadgeServiceServer interface {
	mustEmbedUnimplementedBadgeServiceServer()
}

func RegisterBadgeServiceServer(s grpc.ServiceRegistrar, srv BadgeServiceServer) {
	// If the following call pancis, it indicates UnimplementedBadgeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BadgeService_ServiceDesc, srv)
}

func _BadgeService_GetBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBadgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgeServiceServer).GetBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BadgeService_GetBadge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgeServiceServer).GetBadge(ctx, req.(*GetBadgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BadgeService_ListBadges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBadgesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgeServiceServer).ListBadges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BadgeService_ListBadges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgeServiceServer).ListBadges(ctx, req.(*ListBadgesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BadgeService_GetBadgesByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBadgesByCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgeServiceServer).GetBadgesByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BadgeService_GetBadgesByCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgeServiceServer).GetBadgesByCategory(ctx, req.(*GetBadgesByCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BadgeService_GetBadgesByLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBadgesByLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgeServiceServer).GetBadgesByLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BadgeService_GetBadgesByLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgeServiceServer).GetBadgesByLevel(ctx, req.(*GetBadgesByLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BadgeService_CreateBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBadgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgeServiceServer).CreateBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BadgeService_CreateBadge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgeServiceServer).CreateBadge(ctx, req.(*CreateBadgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BadgeService_UpdateBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBadgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgeServiceServer).UpdateBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BadgeService_UpdateBadge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgeServiceServer).UpdateBadge(ctx, req.(*UpdateBadgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BadgeService_DeleteBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBadgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgeServiceServer).DeleteBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BadgeService_DeleteBadge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgeServiceServer).DeleteBadge(ctx, req.(*DeleteBadgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BadgeService_ServiceDesc is the grpc.ServiceDesc for BadgeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BadgeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.badge.v1.BadgeService",
	HandlerType: (*BadgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBadge",
			Handler:    _BadgeService_GetBadge_Handler,
		},
		{
			MethodName: "ListBadges",
			Handler:    _BadgeService_ListBadges_Handler,
		},
		{
			MethodName: "GetBadgesByCategory",
			Handler:    _BadgeService_GetBadgesByCategory_Handler,
		},
		{
			MethodName: "GetBadgesByLevel",
			Handler:    _BadgeService_GetBadgesByLevel_Handler,
		},
		{
			MethodName: "CreateBadge",
			Handler:    _BadgeService_CreateBadge_Handler,
		},
		{
			MethodName: "UpdateBadge",
			Handler:    _BadgeService_UpdateBadge_Handler,
		},
		{
			MethodName: "DeleteBadge",
			Handler:    _BadgeService_DeleteBadge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/badge/v1/badge.proto",
}
