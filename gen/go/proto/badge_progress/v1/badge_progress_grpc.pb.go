// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/badge_progress/v1/badge_progress.proto

package badgeprogresspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BadgeProgressService_GetUserBadgeProgress_FullMethodName = "/proto.badge_progress.v1.BadgeProgressService/GetUserBadgeProgress"
	BadgeProgressService_UpdateProgress_FullMethodName       = "/proto.badge_progress.v1.BadgeProgressService/UpdateProgress"
	BadgeProgressService_GetProgressForBadge_FullMethodName  = "/proto.badge_progress.v1.BadgeProgressService/GetProgressForBadge"
)

// BadgeProgressServiceClient is the client API for BadgeProgressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BadgeProgressServiceClient interface {
	GetUserBadgeProgress(ctx context.Context, in *GetUserBadgeProgressRequest, opts ...grpc.CallOption) (*GetUserBadgeProgressResponse, error)
	UpdateProgress(ctx context.Context, in *UpdateProgressRequest, opts ...grpc.CallOption) (*UpdateProgressResponse, error)
	GetProgressForBadge(ctx context.Context, in *GetProgressForBadgeRequest, opts ...grpc.CallOption) (*GetProgressForBadgeResponse, error)
}

type badgeProgressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBadgeProgressServiceClient(cc grpc.ClientConnInterface) BadgeProgressServiceClient {
	return &badgeProgressServiceClient{cc}
}

func (c *badgeProgressServiceClient) GetUserBadgeProgress(ctx context.Context, in *GetUserBadgeProgressRequest, opts ...grpc.CallOption) (*GetUserBadgeProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserBadgeProgressResponse)
	err := c.cc.Invoke(ctx, BadgeProgressService_GetUserBadgeProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badgeProgressServiceClient) UpdateProgress(ctx context.Context, in *UpdateProgressRequest, opts ...grpc.CallOption) (*UpdateProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProgressResponse)
	err := c.cc.Invoke(ctx, BadgeProgressService_UpdateProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badgeProgressServiceClient) GetProgressForBadge(ctx context.Context, in *GetProgressForBadgeRequest, opts ...grpc.CallOption) (*GetProgressForBadgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProgressForBadgeResponse)
	err := c.cc.Invoke(ctx, BadgeProgressService_GetProgressForBadge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BadgeProgressServiceServer is the server API for BadgeProgressService service.
// All implementations must embed UnimplementedBadgeProgressServiceServer
// for forward compatibility.
type BadgeProgressServiceServer interface {
	GetUserBadgeProgress(context.Context, *GetUserBadgeProgressRequest) (*GetUserBadgeProgressResponse, error)
	UpdateProgress(context.Context, *UpdateProgressRequest) (*UpdateProgressResponse, error)
	GetProgressForBadge(context.Context, *GetProgressForBadgeRequest) (*GetProgressForBadgeResponse, error)
	mustEmbedUnimplementedBadgeProgressServiceServer()
}

// UnimplementedBadgeProgressServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBadgeProgressServiceServer struct{}

func (UnimplementedBadgeProgressServiceServer) GetUserBadgeProgress(context.Context, *GetUserBadgeProgressRequest) (*GetUserBadgeProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBadgeProgress not implemented")
}
func (UnimplementedBadgeProgressServiceServer) UpdateProgress(context.Context, *UpdateProgressRequest) (*UpdateProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProgress not implemented")
}
func (UnimplementedBadgeProgressServiceServer) GetProgressForBadge(context.Context, *GetProgressForBadgeRequest) (*GetProgressForBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgressForBadge not implemented")
}
func (UnimplementedBadgeProgressServiceServer) mustEmbedUnimplementedBadgeProgressServiceServer() {}
func (UnimplementedBadgeProgressServiceServer) testEmbeddedByValue()                              {}

// UnsafeBadgeProgressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BadgeProgressServiceServer will
// result in compilation errors.
type UnsafeBadgeProgressServiceServer interface {
	mustEmbedUnimplementedBadgeProgressServiceServer()
}

func RegisterBadgeProgressServiceServer(s grpc.ServiceRegistrar, srv BadgeProgressServiceServer) {
	// If the following call pancis, it indicates UnimplementedBadgeProgressServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BadgeProgressService_ServiceDesc, srv)
}

func _BadgeProgressService_GetUserBadgeProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBadgeProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgeProgressServiceServer).GetUserBadgeProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BadgeProgressService_GetUserBadgeProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgeProgressServiceServer).GetUserBadgeProgress(ctx, req.(*GetUserBadgeProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BadgeProgressService_UpdateProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgeProgressServiceServer).UpdateProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BadgeProgressService_UpdateProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgeProgressServiceServer).UpdateProgress(ctx, req.(*UpdateProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BadgeProgressService_GetProgressForBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProgressForBadgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgeProgressServiceServer).GetProgressForBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BadgeProgressService_GetProgressForBadge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgeProgressServiceServer).GetProgressForBadge(ctx, req.(*GetProgressForBadgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BadgeProgressService_ServiceDesc is the grpc.ServiceDesc for BadgeProgressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BadgeProgressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.badge_progress.v1.BadgeProgressService",
	HandlerType: (*BadgeProgressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserBadgeProgress",
			Handler:    _BadgeProgressService_GetUserBadgeProgress_Handler,
		},
		{
			MethodName: "UpdateProgress",
			Handler:    _BadgeProgressService_UpdateProgress_Handler,
		},
		{
			MethodName: "GetProgressForBadge",
			Handler:    _BadgeProgressService_GetProgressForBadge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/badge_progress/v1/badge_progress.proto",
}
