// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/user_badge/v1/user_badge.proto

package userbadgepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserBadgeService_GetUserBadges_FullMethodName    = "/proto.user_badge.v1.UserBadgeService/GetUserBadges"
	UserBadgeService_AwardBadge_FullMethodName       = "/proto.user_badge.v1.UserBadgeService/AwardBadge"
	UserBadgeService_ShareBadge_FullMethodName       = "/proto.user_badge.v1.UserBadgeService/ShareBadge"
	UserBadgeService_GetRecentBadges_FullMethodName  = "/proto.user_badge.v1.UserBadgeService/GetRecentBadges"
	UserBadgeService_CheckBadgeUnlock_FullMethodName = "/proto.user_badge.v1.UserBadgeService/CheckBadgeUnlock"
)

// UserBadgeServiceClient is the client API for UserBadgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserBadgeServiceClient interface {
	GetUserBadges(ctx context.Context, in *GetUserBadgesRequest, opts ...grpc.CallOption) (*GetUserBadgesResponse, error)
	AwardBadge(ctx context.Context, in *AwardBadgeRequest, opts ...grpc.CallOption) (*AwardBadgeResponse, error)
	ShareBadge(ctx context.Context, in *ShareBadgeRequest, opts ...grpc.CallOption) (*ShareBadgeResponse, error)
	GetRecentBadges(ctx context.Context, in *GetRecentBadgesRequest, opts ...grpc.CallOption) (*GetRecentBadgesResponse, error)
	CheckBadgeUnlock(ctx context.Context, in *CheckBadgeUnlockRequest, opts ...grpc.CallOption) (*CheckBadgeUnlockResponse, error)
}

type userBadgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserBadgeServiceClient(cc grpc.ClientConnInterface) UserBadgeServiceClient {
	return &userBadgeServiceClient{cc}
}

func (c *userBadgeServiceClient) GetUserBadges(ctx context.Context, in *GetUserBadgesRequest, opts ...grpc.CallOption) (*GetUserBadgesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserBadgesResponse)
	err := c.cc.Invoke(ctx, UserBadgeService_GetUserBadges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBadgeServiceClient) AwardBadge(ctx context.Context, in *AwardBadgeRequest, opts ...grpc.CallOption) (*AwardBadgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AwardBadgeResponse)
	err := c.cc.Invoke(ctx, UserBadgeService_AwardBadge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBadgeServiceClient) ShareBadge(ctx context.Context, in *ShareBadgeRequest, opts ...grpc.CallOption) (*ShareBadgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShareBadgeResponse)
	err := c.cc.Invoke(ctx, UserBadgeService_ShareBadge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBadgeServiceClient) GetRecentBadges(ctx context.Context, in *GetRecentBadgesRequest, opts ...grpc.CallOption) (*GetRecentBadgesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecentBadgesResponse)
	err := c.cc.Invoke(ctx, UserBadgeService_GetRecentBadges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBadgeServiceClient) CheckBadgeUnlock(ctx context.Context, in *CheckBadgeUnlockRequest, opts ...grpc.CallOption) (*CheckBadgeUnlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckBadgeUnlockResponse)
	err := c.cc.Invoke(ctx, UserBadgeService_CheckBadgeUnlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserBadgeServiceServer is the server API for UserBadgeService service.
// All implementations must embed UnimplementedUserBadgeServiceServer
// for forward compatibility.
type UserBadgeServiceServer interface {
	GetUserBadges(context.Context, *GetUserBadgesRequest) (*GetUserBadgesResponse, error)
	AwardBadge(context.Context, *AwardBadgeRequest) (*AwardBadgeResponse, error)
	ShareBadge(context.Context, *ShareBadgeRequest) (*ShareBadgeResponse, error)
	GetRecentBadges(context.Context, *GetRecentBadgesRequest) (*GetRecentBadgesResponse, error)
	CheckBadgeUnlock(context.Context, *CheckBadgeUnlockRequest) (*CheckBadgeUnlockResponse, error)
	mustEmbedUnimplementedUserBadgeServiceServer()
}

// UnimplementedUserBadgeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserBadgeServiceServer struct{}

func (UnimplementedUserBadgeServiceServer) GetUserBadges(context.Context, *GetUserBadgesRequest) (*GetUserBadgesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBadges not implemented")
}
func (UnimplementedUserBadgeServiceServer) AwardBadge(context.Context, *AwardBadgeRequest) (*AwardBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AwardBadge not implemented")
}
func (UnimplementedUserBadgeServiceServer) ShareBadge(context.Context, *ShareBadgeRequest) (*ShareBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareBadge not implemented")
}
func (UnimplementedUserBadgeServiceServer) GetRecentBadges(context.Context, *GetRecentBadgesRequest) (*GetRecentBadgesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentBadges not implemented")
}
func (UnimplementedUserBadgeServiceServer) CheckBadgeUnlock(context.Context, *CheckBadgeUnlockRequest) (*CheckBadgeUnlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckBadgeUnlock not implemented")
}
func (UnimplementedUserBadgeServiceServer) mustEmbedUnimplementedUserBadgeServiceServer() {}
func (UnimplementedUserBadgeServiceServer) testEmbeddedByValue()                          {}

// UnsafeUserBadgeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserBadgeServiceServer will
// result in compilation errors.
type UnsafeUserBadgeServiceServer interface {
	mustEmbedUnimplementedUserBadgeServiceServer()
}

func RegisterUserBadgeServiceServer(s grpc.ServiceRegistrar, srv UserBadgeServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserBadgeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserBadgeService_ServiceDesc, srv)
}

func _UserBadgeService_GetUserBadges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBadgesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBadgeServiceServer).GetUserBadges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserBadgeService_GetUserBadges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBadgeServiceServer).GetUserBadges(ctx, req.(*GetUserBadgesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserBadgeService_AwardBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AwardBadgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBadgeServiceServer).AwardBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserBadgeService_AwardBadge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBadgeServiceServer).AwardBadge(ctx, req.(*AwardBadgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserBadgeService_ShareBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareBadgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBadgeServiceServer).ShareBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserBadgeService_ShareBadge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBadgeServiceServer).ShareBadge(ctx, req.(*ShareBadgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserBadgeService_GetRecentBadges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecentBadgesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBadgeServiceServer).GetRecentBadges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserBadgeService_GetRecentBadges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBadgeServiceServer).GetRecentBadges(ctx, req.(*GetRecentBadgesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserBadgeService_CheckBadgeUnlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckBadgeUnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBadgeServiceServer).CheckBadgeUnlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserBadgeService_CheckBadgeUnlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBadgeServiceServer).CheckBadgeUnlock(ctx, req.(*CheckBadgeUnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserBadgeService_ServiceDesc is the grpc.ServiceDesc for UserBadgeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserBadgeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.user_badge.v1.UserBadgeService",
	HandlerType: (*UserBadgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserBadges",
			Handler:    _UserBadgeService_GetUserBadges_Handler,
		},
		{
			MethodName: "AwardBadge",
			Handler:    _UserBadgeService_AwardBadge_Handler,
		},
		{
			MethodName: "ShareBadge",
			Handler:    _UserBadgeService_ShareBadge_Handler,
		},
		{
			MethodName: "GetRecentBadges",
			Handler:    _UserBadgeService_GetRecentBadges_Handler,
		},
		{
			MethodName: "CheckBadgeUnlock",
			Handler:    _UserBadgeService_CheckBadgeUnlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user_badge/v1/user_badge.proto",
}
