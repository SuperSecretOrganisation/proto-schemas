// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/notification_token/v1/notification_token.proto

package notification_tokenpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotificationTokenService_CreateNotificationToken_FullMethodName = "/proto.notification_token.v1.NotificationTokenService/CreateNotificationToken"
	NotificationTokenService_GetNotificationToken_FullMethodName    = "/proto.notification_token.v1.NotificationTokenService/GetNotificationToken"
	NotificationTokenService_UpdateNotificationToken_FullMethodName = "/proto.notification_token.v1.NotificationTokenService/UpdateNotificationToken"
	NotificationTokenService_DeleteNotificationToken_FullMethodName = "/proto.notification_token.v1.NotificationTokenService/DeleteNotificationToken"
	NotificationTokenService_ListNotificationTokens_FullMethodName  = "/proto.notification_token.v1.NotificationTokenService/ListNotificationTokens"
)

// NotificationTokenServiceClient is the client API for NotificationTokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationTokenServiceClient interface {
	CreateNotificationToken(ctx context.Context, in *CreateNotificationTokenRequest, opts ...grpc.CallOption) (*CreateNotificationTokenResponse, error)
	GetNotificationToken(ctx context.Context, in *GetNotificationTokenRequest, opts ...grpc.CallOption) (*GetNotificationTokenResponse, error)
	UpdateNotificationToken(ctx context.Context, in *UpdateNotificationTokenRequest, opts ...grpc.CallOption) (*UpdateNotificationTokenResponse, error)
	DeleteNotificationToken(ctx context.Context, in *DeleteNotificationTokenRequest, opts ...grpc.CallOption) (*DeleteNotificationTokenResponse, error)
	ListNotificationTokens(ctx context.Context, in *ListNotificationTokensRequest, opts ...grpc.CallOption) (*ListNotificationTokensResponse, error)
}

type notificationTokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationTokenServiceClient(cc grpc.ClientConnInterface) NotificationTokenServiceClient {
	return &notificationTokenServiceClient{cc}
}

func (c *notificationTokenServiceClient) CreateNotificationToken(ctx context.Context, in *CreateNotificationTokenRequest, opts ...grpc.CallOption) (*CreateNotificationTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNotificationTokenResponse)
	err := c.cc.Invoke(ctx, NotificationTokenService_CreateNotificationToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationTokenServiceClient) GetNotificationToken(ctx context.Context, in *GetNotificationTokenRequest, opts ...grpc.CallOption) (*GetNotificationTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNotificationTokenResponse)
	err := c.cc.Invoke(ctx, NotificationTokenService_GetNotificationToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationTokenServiceClient) UpdateNotificationToken(ctx context.Context, in *UpdateNotificationTokenRequest, opts ...grpc.CallOption) (*UpdateNotificationTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNotificationTokenResponse)
	err := c.cc.Invoke(ctx, NotificationTokenService_UpdateNotificationToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationTokenServiceClient) DeleteNotificationToken(ctx context.Context, in *DeleteNotificationTokenRequest, opts ...grpc.CallOption) (*DeleteNotificationTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteNotificationTokenResponse)
	err := c.cc.Invoke(ctx, NotificationTokenService_DeleteNotificationToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationTokenServiceClient) ListNotificationTokens(ctx context.Context, in *ListNotificationTokensRequest, opts ...grpc.CallOption) (*ListNotificationTokensResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNotificationTokensResponse)
	err := c.cc.Invoke(ctx, NotificationTokenService_ListNotificationTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationTokenServiceServer is the server API for NotificationTokenService service.
// All implementations must embed UnimplementedNotificationTokenServiceServer
// for forward compatibility.
type NotificationTokenServiceServer interface {
	CreateNotificationToken(context.Context, *CreateNotificationTokenRequest) (*CreateNotificationTokenResponse, error)
	GetNotificationToken(context.Context, *GetNotificationTokenRequest) (*GetNotificationTokenResponse, error)
	UpdateNotificationToken(context.Context, *UpdateNotificationTokenRequest) (*UpdateNotificationTokenResponse, error)
	DeleteNotificationToken(context.Context, *DeleteNotificationTokenRequest) (*DeleteNotificationTokenResponse, error)
	ListNotificationTokens(context.Context, *ListNotificationTokensRequest) (*ListNotificationTokensResponse, error)
	mustEmbedUnimplementedNotificationTokenServiceServer()
}

// UnimplementedNotificationTokenServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotificationTokenServiceServer struct{}

func (UnimplementedNotificationTokenServiceServer) CreateNotificationToken(context.Context, *CreateNotificationTokenRequest) (*CreateNotificationTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotificationToken not implemented")
}
func (UnimplementedNotificationTokenServiceServer) GetNotificationToken(context.Context, *GetNotificationTokenRequest) (*GetNotificationTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationToken not implemented")
}
func (UnimplementedNotificationTokenServiceServer) UpdateNotificationToken(context.Context, *UpdateNotificationTokenRequest) (*UpdateNotificationTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotificationToken not implemented")
}
func (UnimplementedNotificationTokenServiceServer) DeleteNotificationToken(context.Context, *DeleteNotificationTokenRequest) (*DeleteNotificationTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotificationToken not implemented")
}
func (UnimplementedNotificationTokenServiceServer) ListNotificationTokens(context.Context, *ListNotificationTokensRequest) (*ListNotificationTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotificationTokens not implemented")
}
func (UnimplementedNotificationTokenServiceServer) mustEmbedUnimplementedNotificationTokenServiceServer() {
}
func (UnimplementedNotificationTokenServiceServer) testEmbeddedByValue() {}

// UnsafeNotificationTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationTokenServiceServer will
// result in compilation errors.
type UnsafeNotificationTokenServiceServer interface {
	mustEmbedUnimplementedNotificationTokenServiceServer()
}

func RegisterNotificationTokenServiceServer(s grpc.ServiceRegistrar, srv NotificationTokenServiceServer) {
	// If the following call pancis, it indicates UnimplementedNotificationTokenServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotificationTokenService_ServiceDesc, srv)
}

func _NotificationTokenService_CreateNotificationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationTokenServiceServer).CreateNotificationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationTokenService_CreateNotificationToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationTokenServiceServer).CreateNotificationToken(ctx, req.(*CreateNotificationTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationTokenService_GetNotificationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationTokenServiceServer).GetNotificationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationTokenService_GetNotificationToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationTokenServiceServer).GetNotificationToken(ctx, req.(*GetNotificationTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationTokenService_UpdateNotificationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotificationTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationTokenServiceServer).UpdateNotificationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationTokenService_UpdateNotificationToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationTokenServiceServer).UpdateNotificationToken(ctx, req.(*UpdateNotificationTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationTokenService_DeleteNotificationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotificationTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationTokenServiceServer).DeleteNotificationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationTokenService_DeleteNotificationToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationTokenServiceServer).DeleteNotificationToken(ctx, req.(*DeleteNotificationTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationTokenService_ListNotificationTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotificationTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationTokenServiceServer).ListNotificationTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationTokenService_ListNotificationTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationTokenServiceServer).ListNotificationTokens(ctx, req.(*ListNotificationTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationTokenService_ServiceDesc is the grpc.ServiceDesc for NotificationTokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationTokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.notification_token.v1.NotificationTokenService",
	HandlerType: (*NotificationTokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNotificationToken",
			Handler:    _NotificationTokenService_CreateNotificationToken_Handler,
		},
		{
			MethodName: "GetNotificationToken",
			Handler:    _NotificationTokenService_GetNotificationToken_Handler,
		},
		{
			MethodName: "UpdateNotificationToken",
			Handler:    _NotificationTokenService_UpdateNotificationToken_Handler,
		},
		{
			MethodName: "DeleteNotificationToken",
			Handler:    _NotificationTokenService_DeleteNotificationToken_Handler,
		},
		{
			MethodName: "ListNotificationTokens",
			Handler:    _NotificationTokenService_ListNotificationTokens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/notification_token/v1/notification_token.proto",
}
