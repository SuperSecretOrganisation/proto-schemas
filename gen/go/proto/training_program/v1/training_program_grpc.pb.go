// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/training_program/v1/training_program.proto

package trainingprogrampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TrainingProgramService_CreateProgram_FullMethodName   = "/proto.training_program.v1.TrainingProgramService/CreateProgram"
	TrainingProgramService_GetProgram_FullMethodName      = "/proto.training_program.v1.TrainingProgramService/GetProgram"
	TrainingProgramService_UpdateProgram_FullMethodName   = "/proto.training_program.v1.TrainingProgramService/UpdateProgram"
	TrainingProgramService_DeleteProgram_FullMethodName   = "/proto.training_program.v1.TrainingProgramService/DeleteProgram"
	TrainingProgramService_ListPrograms_FullMethodName    = "/proto.training_program.v1.TrainingProgramService/ListPrograms"
	TrainingProgramService_StartProgram_FullMethodName    = "/proto.training_program.v1.TrainingProgramService/StartProgram"
	TrainingProgramService_CompleteWorkout_FullMethodName = "/proto.training_program.v1.TrainingProgramService/CompleteWorkout"
)

// TrainingProgramServiceClient is the client API for TrainingProgramService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainingProgramServiceClient interface {
	CreateProgram(ctx context.Context, in *CreateProgramRequest, opts ...grpc.CallOption) (*CreateProgramResponse, error)
	GetProgram(ctx context.Context, in *GetProgramRequest, opts ...grpc.CallOption) (*GetProgramResponse, error)
	UpdateProgram(ctx context.Context, in *UpdateProgramRequest, opts ...grpc.CallOption) (*UpdateProgramResponse, error)
	DeleteProgram(ctx context.Context, in *DeleteProgramRequest, opts ...grpc.CallOption) (*DeleteProgramResponse, error)
	ListPrograms(ctx context.Context, in *ListProgramsRequest, opts ...grpc.CallOption) (*ListProgramsResponse, error)
	StartProgram(ctx context.Context, in *StartProgramRequest, opts ...grpc.CallOption) (*StartProgramResponse, error)
	CompleteWorkout(ctx context.Context, in *CompleteWorkoutRequest, opts ...grpc.CallOption) (*CompleteWorkoutResponse, error)
}

type trainingProgramServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainingProgramServiceClient(cc grpc.ClientConnInterface) TrainingProgramServiceClient {
	return &trainingProgramServiceClient{cc}
}

func (c *trainingProgramServiceClient) CreateProgram(ctx context.Context, in *CreateProgramRequest, opts ...grpc.CallOption) (*CreateProgramResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProgramResponse)
	err := c.cc.Invoke(ctx, TrainingProgramService_CreateProgram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingProgramServiceClient) GetProgram(ctx context.Context, in *GetProgramRequest, opts ...grpc.CallOption) (*GetProgramResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProgramResponse)
	err := c.cc.Invoke(ctx, TrainingProgramService_GetProgram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingProgramServiceClient) UpdateProgram(ctx context.Context, in *UpdateProgramRequest, opts ...grpc.CallOption) (*UpdateProgramResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProgramResponse)
	err := c.cc.Invoke(ctx, TrainingProgramService_UpdateProgram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingProgramServiceClient) DeleteProgram(ctx context.Context, in *DeleteProgramRequest, opts ...grpc.CallOption) (*DeleteProgramResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProgramResponse)
	err := c.cc.Invoke(ctx, TrainingProgramService_DeleteProgram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingProgramServiceClient) ListPrograms(ctx context.Context, in *ListProgramsRequest, opts ...grpc.CallOption) (*ListProgramsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProgramsResponse)
	err := c.cc.Invoke(ctx, TrainingProgramService_ListPrograms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingProgramServiceClient) StartProgram(ctx context.Context, in *StartProgramRequest, opts ...grpc.CallOption) (*StartProgramResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartProgramResponse)
	err := c.cc.Invoke(ctx, TrainingProgramService_StartProgram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingProgramServiceClient) CompleteWorkout(ctx context.Context, in *CompleteWorkoutRequest, opts ...grpc.CallOption) (*CompleteWorkoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteWorkoutResponse)
	err := c.cc.Invoke(ctx, TrainingProgramService_CompleteWorkout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainingProgramServiceServer is the server API for TrainingProgramService service.
// All implementations must embed UnimplementedTrainingProgramServiceServer
// for forward compatibility.
type TrainingProgramServiceServer interface {
	CreateProgram(context.Context, *CreateProgramRequest) (*CreateProgramResponse, error)
	GetProgram(context.Context, *GetProgramRequest) (*GetProgramResponse, error)
	UpdateProgram(context.Context, *UpdateProgramRequest) (*UpdateProgramResponse, error)
	DeleteProgram(context.Context, *DeleteProgramRequest) (*DeleteProgramResponse, error)
	ListPrograms(context.Context, *ListProgramsRequest) (*ListProgramsResponse, error)
	StartProgram(context.Context, *StartProgramRequest) (*StartProgramResponse, error)
	CompleteWorkout(context.Context, *CompleteWorkoutRequest) (*CompleteWorkoutResponse, error)
	mustEmbedUnimplementedTrainingProgramServiceServer()
}

// UnimplementedTrainingProgramServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTrainingProgramServiceServer struct{}

func (UnimplementedTrainingProgramServiceServer) CreateProgram(context.Context, *CreateProgramRequest) (*CreateProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProgram not implemented")
}
func (UnimplementedTrainingProgramServiceServer) GetProgram(context.Context, *GetProgramRequest) (*GetProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgram not implemented")
}
func (UnimplementedTrainingProgramServiceServer) UpdateProgram(context.Context, *UpdateProgramRequest) (*UpdateProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProgram not implemented")
}
func (UnimplementedTrainingProgramServiceServer) DeleteProgram(context.Context, *DeleteProgramRequest) (*DeleteProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProgram not implemented")
}
func (UnimplementedTrainingProgramServiceServer) ListPrograms(context.Context, *ListProgramsRequest) (*ListProgramsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrograms not implemented")
}
func (UnimplementedTrainingProgramServiceServer) StartProgram(context.Context, *StartProgramRequest) (*StartProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartProgram not implemented")
}
func (UnimplementedTrainingProgramServiceServer) CompleteWorkout(context.Context, *CompleteWorkoutRequest) (*CompleteWorkoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteWorkout not implemented")
}
func (UnimplementedTrainingProgramServiceServer) mustEmbedUnimplementedTrainingProgramServiceServer() {
}
func (UnimplementedTrainingProgramServiceServer) testEmbeddedByValue() {}

// UnsafeTrainingProgramServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainingProgramServiceServer will
// result in compilation errors.
type UnsafeTrainingProgramServiceServer interface {
	mustEmbedUnimplementedTrainingProgramServiceServer()
}

func RegisterTrainingProgramServiceServer(s grpc.ServiceRegistrar, srv TrainingProgramServiceServer) {
	// If the following call pancis, it indicates UnimplementedTrainingProgramServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TrainingProgramService_ServiceDesc, srv)
}

func _TrainingProgramService_CreateProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingProgramServiceServer).CreateProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainingProgramService_CreateProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingProgramServiceServer).CreateProgram(ctx, req.(*CreateProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingProgramService_GetProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingProgramServiceServer).GetProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainingProgramService_GetProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingProgramServiceServer).GetProgram(ctx, req.(*GetProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingProgramService_UpdateProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingProgramServiceServer).UpdateProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainingProgramService_UpdateProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingProgramServiceServer).UpdateProgram(ctx, req.(*UpdateProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingProgramService_DeleteProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingProgramServiceServer).DeleteProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainingProgramService_DeleteProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingProgramServiceServer).DeleteProgram(ctx, req.(*DeleteProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingProgramService_ListPrograms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProgramsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingProgramServiceServer).ListPrograms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainingProgramService_ListPrograms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingProgramServiceServer).ListPrograms(ctx, req.(*ListProgramsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingProgramService_StartProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingProgramServiceServer).StartProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainingProgramService_StartProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingProgramServiceServer).StartProgram(ctx, req.(*StartProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingProgramService_CompleteWorkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteWorkoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingProgramServiceServer).CompleteWorkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainingProgramService_CompleteWorkout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingProgramServiceServer).CompleteWorkout(ctx, req.(*CompleteWorkoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrainingProgramService_ServiceDesc is the grpc.ServiceDesc for TrainingProgramService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrainingProgramService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.training_program.v1.TrainingProgramService",
	HandlerType: (*TrainingProgramServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProgram",
			Handler:    _TrainingProgramService_CreateProgram_Handler,
		},
		{
			MethodName: "GetProgram",
			Handler:    _TrainingProgramService_GetProgram_Handler,
		},
		{
			MethodName: "UpdateProgram",
			Handler:    _TrainingProgramService_UpdateProgram_Handler,
		},
		{
			MethodName: "DeleteProgram",
			Handler:    _TrainingProgramService_DeleteProgram_Handler,
		},
		{
			MethodName: "ListPrograms",
			Handler:    _TrainingProgramService_ListPrograms_Handler,
		},
		{
			MethodName: "StartProgram",
			Handler:    _TrainingProgramService_StartProgram_Handler,
		},
		{
			MethodName: "CompleteWorkout",
			Handler:    _TrainingProgramService_CompleteWorkout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/training_program/v1/training_program.proto",
}
