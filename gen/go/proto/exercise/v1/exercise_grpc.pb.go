// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/exercise/v1/exercise.proto

package exercisepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExerciseService_CreateExercise_FullMethodName  = "/proto.exercise.v1.ExerciseService/CreateExercise"
	ExerciseService_GetExercise_FullMethodName     = "/proto.exercise.v1.ExerciseService/GetExercise"
	ExerciseService_UpdateExercise_FullMethodName  = "/proto.exercise.v1.ExerciseService/UpdateExercise"
	ExerciseService_DeleteExercise_FullMethodName  = "/proto.exercise.v1.ExerciseService/DeleteExercise"
	ExerciseService_ListExercises_FullMethodName   = "/proto.exercise.v1.ExerciseService/ListExercises"
	ExerciseService_SearchExercises_FullMethodName = "/proto.exercise.v1.ExerciseService/SearchExercises"
)

// ExerciseServiceClient is the client API for ExerciseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExerciseServiceClient interface {
	CreateExercise(ctx context.Context, in *CreateExerciseRequest, opts ...grpc.CallOption) (*CreateExerciseResponse, error)
	GetExercise(ctx context.Context, in *GetExerciseRequest, opts ...grpc.CallOption) (*GetExerciseResponse, error)
	UpdateExercise(ctx context.Context, in *UpdateExerciseRequest, opts ...grpc.CallOption) (*UpdateExerciseResponse, error)
	DeleteExercise(ctx context.Context, in *DeleteExerciseRequest, opts ...grpc.CallOption) (*DeleteExerciseResponse, error)
	ListExercises(ctx context.Context, in *ListExercisesRequest, opts ...grpc.CallOption) (*ListExercisesResponse, error)
	SearchExercises(ctx context.Context, in *SearchExercisesRequest, opts ...grpc.CallOption) (*SearchExercisesResponse, error)
}

type exerciseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExerciseServiceClient(cc grpc.ClientConnInterface) ExerciseServiceClient {
	return &exerciseServiceClient{cc}
}

func (c *exerciseServiceClient) CreateExercise(ctx context.Context, in *CreateExerciseRequest, opts ...grpc.CallOption) (*CreateExerciseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateExerciseResponse)
	err := c.cc.Invoke(ctx, ExerciseService_CreateExercise_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exerciseServiceClient) GetExercise(ctx context.Context, in *GetExerciseRequest, opts ...grpc.CallOption) (*GetExerciseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExerciseResponse)
	err := c.cc.Invoke(ctx, ExerciseService_GetExercise_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exerciseServiceClient) UpdateExercise(ctx context.Context, in *UpdateExerciseRequest, opts ...grpc.CallOption) (*UpdateExerciseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateExerciseResponse)
	err := c.cc.Invoke(ctx, ExerciseService_UpdateExercise_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exerciseServiceClient) DeleteExercise(ctx context.Context, in *DeleteExerciseRequest, opts ...grpc.CallOption) (*DeleteExerciseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteExerciseResponse)
	err := c.cc.Invoke(ctx, ExerciseService_DeleteExercise_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exerciseServiceClient) ListExercises(ctx context.Context, in *ListExercisesRequest, opts ...grpc.CallOption) (*ListExercisesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListExercisesResponse)
	err := c.cc.Invoke(ctx, ExerciseService_ListExercises_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exerciseServiceClient) SearchExercises(ctx context.Context, in *SearchExercisesRequest, opts ...grpc.CallOption) (*SearchExercisesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchExercisesResponse)
	err := c.cc.Invoke(ctx, ExerciseService_SearchExercises_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExerciseServiceServer is the server API for ExerciseService service.
// All implementations must embed UnimplementedExerciseServiceServer
// for forward compatibility.
type ExerciseServiceServer interface {
	CreateExercise(context.Context, *CreateExerciseRequest) (*CreateExerciseResponse, error)
	GetExercise(context.Context, *GetExerciseRequest) (*GetExerciseResponse, error)
	UpdateExercise(context.Context, *UpdateExerciseRequest) (*UpdateExerciseResponse, error)
	DeleteExercise(context.Context, *DeleteExerciseRequest) (*DeleteExerciseResponse, error)
	ListExercises(context.Context, *ListExercisesRequest) (*ListExercisesResponse, error)
	SearchExercises(context.Context, *SearchExercisesRequest) (*SearchExercisesResponse, error)
	mustEmbedUnimplementedExerciseServiceServer()
}

// UnimplementedExerciseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExerciseServiceServer struct{}

func (UnimplementedExerciseServiceServer) CreateExercise(context.Context, *CreateExerciseRequest) (*CreateExerciseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExercise not implemented")
}
func (UnimplementedExerciseServiceServer) GetExercise(context.Context, *GetExerciseRequest) (*GetExerciseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExercise not implemented")
}
func (UnimplementedExerciseServiceServer) UpdateExercise(context.Context, *UpdateExerciseRequest) (*UpdateExerciseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExercise not implemented")
}
func (UnimplementedExerciseServiceServer) DeleteExercise(context.Context, *DeleteExerciseRequest) (*DeleteExerciseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExercise not implemented")
}
func (UnimplementedExerciseServiceServer) ListExercises(context.Context, *ListExercisesRequest) (*ListExercisesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExercises not implemented")
}
func (UnimplementedExerciseServiceServer) SearchExercises(context.Context, *SearchExercisesRequest) (*SearchExercisesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchExercises not implemented")
}
func (UnimplementedExerciseServiceServer) mustEmbedUnimplementedExerciseServiceServer() {}
func (UnimplementedExerciseServiceServer) testEmbeddedByValue()                         {}

// UnsafeExerciseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExerciseServiceServer will
// result in compilation errors.
type UnsafeExerciseServiceServer interface {
	mustEmbedUnimplementedExerciseServiceServer()
}

func RegisterExerciseServiceServer(s grpc.ServiceRegistrar, srv ExerciseServiceServer) {
	// If the following call pancis, it indicates UnimplementedExerciseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExerciseService_ServiceDesc, srv)
}

func _ExerciseService_CreateExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseServiceServer).CreateExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExerciseService_CreateExercise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseServiceServer).CreateExercise(ctx, req.(*CreateExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExerciseService_GetExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseServiceServer).GetExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExerciseService_GetExercise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseServiceServer).GetExercise(ctx, req.(*GetExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExerciseService_UpdateExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseServiceServer).UpdateExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExerciseService_UpdateExercise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseServiceServer).UpdateExercise(ctx, req.(*UpdateExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExerciseService_DeleteExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseServiceServer).DeleteExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExerciseService_DeleteExercise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseServiceServer).DeleteExercise(ctx, req.(*DeleteExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExerciseService_ListExercises_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExercisesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseServiceServer).ListExercises(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExerciseService_ListExercises_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseServiceServer).ListExercises(ctx, req.(*ListExercisesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExerciseService_SearchExercises_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchExercisesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExerciseServiceServer).SearchExercises(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExerciseService_SearchExercises_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExerciseServiceServer).SearchExercises(ctx, req.(*SearchExercisesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExerciseService_ServiceDesc is the grpc.ServiceDesc for ExerciseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExerciseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.exercise.v1.ExerciseService",
	HandlerType: (*ExerciseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExercise",
			Handler:    _ExerciseService_CreateExercise_Handler,
		},
		{
			MethodName: "GetExercise",
			Handler:    _ExerciseService_GetExercise_Handler,
		},
		{
			MethodName: "UpdateExercise",
			Handler:    _ExerciseService_UpdateExercise_Handler,
		},
		{
			MethodName: "DeleteExercise",
			Handler:    _ExerciseService_DeleteExercise_Handler,
		},
		{
			MethodName: "ListExercises",
			Handler:    _ExerciseService_ListExercises_Handler,
		},
		{
			MethodName: "SearchExercises",
			Handler:    _ExerciseService_SearchExercises_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/exercise/v1/exercise.proto",
}
