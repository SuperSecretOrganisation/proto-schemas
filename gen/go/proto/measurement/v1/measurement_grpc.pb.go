// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/measurement/v1/measurement.proto

package measurementpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MeasurementService_GetMeasurement_FullMethodName          = "/proto.measurement.v1.MeasurementService/GetMeasurement"
	MeasurementService_ListMeasurementsForUser_FullMethodName = "/proto.measurement.v1.MeasurementService/ListMeasurementsForUser"
	MeasurementService_ListAllMeasurements_FullMethodName     = "/proto.measurement.v1.MeasurementService/ListAllMeasurements"
	MeasurementService_CreateMeasurement_FullMethodName       = "/proto.measurement.v1.MeasurementService/CreateMeasurement"
	MeasurementService_UpdateMeasurement_FullMethodName       = "/proto.measurement.v1.MeasurementService/UpdateMeasurement"
	MeasurementService_DeleteMeasurement_FullMethodName       = "/proto.measurement.v1.MeasurementService/DeleteMeasurement"
)

// MeasurementServiceClient is the client API for MeasurementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeasurementServiceClient interface {
	GetMeasurement(ctx context.Context, in *GetMeasurementRequest, opts ...grpc.CallOption) (*GetMeasurementResponse, error)
	ListMeasurementsForUser(ctx context.Context, in *ListMeasurementsForUserRequest, opts ...grpc.CallOption) (*ListMeasurementsForUserResponse, error)
	ListAllMeasurements(ctx context.Context, in *ListAllMeasurementsRequest, opts ...grpc.CallOption) (*ListAllMeasurementsResponse, error)
	CreateMeasurement(ctx context.Context, in *CreateMeasurementRequest, opts ...grpc.CallOption) (*CreateMeasurementResponse, error)
	UpdateMeasurement(ctx context.Context, in *UpdateMeasurementRequest, opts ...grpc.CallOption) (*UpdateMeasurementResponse, error)
	DeleteMeasurement(ctx context.Context, in *DeleteMeasurementRequest, opts ...grpc.CallOption) (*DeleteMeasurementResponse, error)
}

type measurementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeasurementServiceClient(cc grpc.ClientConnInterface) MeasurementServiceClient {
	return &measurementServiceClient{cc}
}

func (c *measurementServiceClient) GetMeasurement(ctx context.Context, in *GetMeasurementRequest, opts ...grpc.CallOption) (*GetMeasurementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMeasurementResponse)
	err := c.cc.Invoke(ctx, MeasurementService_GetMeasurement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *measurementServiceClient) ListMeasurementsForUser(ctx context.Context, in *ListMeasurementsForUserRequest, opts ...grpc.CallOption) (*ListMeasurementsForUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMeasurementsForUserResponse)
	err := c.cc.Invoke(ctx, MeasurementService_ListMeasurementsForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *measurementServiceClient) ListAllMeasurements(ctx context.Context, in *ListAllMeasurementsRequest, opts ...grpc.CallOption) (*ListAllMeasurementsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAllMeasurementsResponse)
	err := c.cc.Invoke(ctx, MeasurementService_ListAllMeasurements_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *measurementServiceClient) CreateMeasurement(ctx context.Context, in *CreateMeasurementRequest, opts ...grpc.CallOption) (*CreateMeasurementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMeasurementResponse)
	err := c.cc.Invoke(ctx, MeasurementService_CreateMeasurement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *measurementServiceClient) UpdateMeasurement(ctx context.Context, in *UpdateMeasurementRequest, opts ...grpc.CallOption) (*UpdateMeasurementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMeasurementResponse)
	err := c.cc.Invoke(ctx, MeasurementService_UpdateMeasurement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *measurementServiceClient) DeleteMeasurement(ctx context.Context, in *DeleteMeasurementRequest, opts ...grpc.CallOption) (*DeleteMeasurementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMeasurementResponse)
	err := c.cc.Invoke(ctx, MeasurementService_DeleteMeasurement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeasurementServiceServer is the server API for MeasurementService service.
// All implementations must embed UnimplementedMeasurementServiceServer
// for forward compatibility.
type MeasurementServiceServer interface {
	GetMeasurement(context.Context, *GetMeasurementRequest) (*GetMeasurementResponse, error)
	ListMeasurementsForUser(context.Context, *ListMeasurementsForUserRequest) (*ListMeasurementsForUserResponse, error)
	ListAllMeasurements(context.Context, *ListAllMeasurementsRequest) (*ListAllMeasurementsResponse, error)
	CreateMeasurement(context.Context, *CreateMeasurementRequest) (*CreateMeasurementResponse, error)
	UpdateMeasurement(context.Context, *UpdateMeasurementRequest) (*UpdateMeasurementResponse, error)
	DeleteMeasurement(context.Context, *DeleteMeasurementRequest) (*DeleteMeasurementResponse, error)
	mustEmbedUnimplementedMeasurementServiceServer()
}

// UnimplementedMeasurementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMeasurementServiceServer struct{}

func (UnimplementedMeasurementServiceServer) GetMeasurement(context.Context, *GetMeasurementRequest) (*GetMeasurementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeasurement not implemented")
}
func (UnimplementedMeasurementServiceServer) ListMeasurementsForUser(context.Context, *ListMeasurementsForUserRequest) (*ListMeasurementsForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMeasurementsForUser not implemented")
}
func (UnimplementedMeasurementServiceServer) ListAllMeasurements(context.Context, *ListAllMeasurementsRequest) (*ListAllMeasurementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllMeasurements not implemented")
}
func (UnimplementedMeasurementServiceServer) CreateMeasurement(context.Context, *CreateMeasurementRequest) (*CreateMeasurementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeasurement not implemented")
}
func (UnimplementedMeasurementServiceServer) UpdateMeasurement(context.Context, *UpdateMeasurementRequest) (*UpdateMeasurementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMeasurement not implemented")
}
func (UnimplementedMeasurementServiceServer) DeleteMeasurement(context.Context, *DeleteMeasurementRequest) (*DeleteMeasurementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMeasurement not implemented")
}
func (UnimplementedMeasurementServiceServer) mustEmbedUnimplementedMeasurementServiceServer() {}
func (UnimplementedMeasurementServiceServer) testEmbeddedByValue()                            {}

// UnsafeMeasurementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeasurementServiceServer will
// result in compilation errors.
type UnsafeMeasurementServiceServer interface {
	mustEmbedUnimplementedMeasurementServiceServer()
}

func RegisterMeasurementServiceServer(s grpc.ServiceRegistrar, srv MeasurementServiceServer) {
	// If the following call pancis, it indicates UnimplementedMeasurementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MeasurementService_ServiceDesc, srv)
}

func _MeasurementService_GetMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeasurementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasurementServiceServer).GetMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeasurementService_GetMeasurement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasurementServiceServer).GetMeasurement(ctx, req.(*GetMeasurementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeasurementService_ListMeasurementsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMeasurementsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasurementServiceServer).ListMeasurementsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeasurementService_ListMeasurementsForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasurementServiceServer).ListMeasurementsForUser(ctx, req.(*ListMeasurementsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeasurementService_ListAllMeasurements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllMeasurementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasurementServiceServer).ListAllMeasurements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeasurementService_ListAllMeasurements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasurementServiceServer).ListAllMeasurements(ctx, req.(*ListAllMeasurementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeasurementService_CreateMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeasurementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasurementServiceServer).CreateMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeasurementService_CreateMeasurement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasurementServiceServer).CreateMeasurement(ctx, req.(*CreateMeasurementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeasurementService_UpdateMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMeasurementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasurementServiceServer).UpdateMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeasurementService_UpdateMeasurement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasurementServiceServer).UpdateMeasurement(ctx, req.(*UpdateMeasurementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeasurementService_DeleteMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMeasurementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasurementServiceServer).DeleteMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeasurementService_DeleteMeasurement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasurementServiceServer).DeleteMeasurement(ctx, req.(*DeleteMeasurementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeasurementService_ServiceDesc is the grpc.ServiceDesc for MeasurementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeasurementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.measurement.v1.MeasurementService",
	HandlerType: (*MeasurementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMeasurement",
			Handler:    _MeasurementService_GetMeasurement_Handler,
		},
		{
			MethodName: "ListMeasurementsForUser",
			Handler:    _MeasurementService_ListMeasurementsForUser_Handler,
		},
		{
			MethodName: "ListAllMeasurements",
			Handler:    _MeasurementService_ListAllMeasurements_Handler,
		},
		{
			MethodName: "CreateMeasurement",
			Handler:    _MeasurementService_CreateMeasurement_Handler,
		},
		{
			MethodName: "UpdateMeasurement",
			Handler:    _MeasurementService_UpdateMeasurement_Handler,
		},
		{
			MethodName: "DeleteMeasurement",
			Handler:    _MeasurementService_DeleteMeasurement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/measurement/v1/measurement.proto",
}
