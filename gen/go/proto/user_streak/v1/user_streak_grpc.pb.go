// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/user_streak/v1/user_streak.proto

package userstreakpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserStreakService_GetUserStreak_FullMethodName    = "/proto.user_streak.v1.UserStreakService/GetUserStreak"
	UserStreakService_UpdateStreak_FullMethodName     = "/proto.user_streak.v1.UserStreakService/UpdateStreak"
	UserStreakService_GetStreakHistory_FullMethodName = "/proto.user_streak.v1.UserStreakService/GetStreakHistory"
	UserStreakService_ResetStreak_FullMethodName      = "/proto.user_streak.v1.UserStreakService/ResetStreak"
)

// UserStreakServiceClient is the client API for UserStreakService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserStreakServiceClient interface {
	GetUserStreak(ctx context.Context, in *GetUserStreakRequest, opts ...grpc.CallOption) (*GetUserStreakResponse, error)
	UpdateStreak(ctx context.Context, in *UpdateStreakRequest, opts ...grpc.CallOption) (*UpdateStreakResponse, error)
	GetStreakHistory(ctx context.Context, in *GetStreakHistoryRequest, opts ...grpc.CallOption) (*GetStreakHistoryResponse, error)
	ResetStreak(ctx context.Context, in *ResetStreakRequest, opts ...grpc.CallOption) (*ResetStreakResponse, error)
}

type userStreakServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserStreakServiceClient(cc grpc.ClientConnInterface) UserStreakServiceClient {
	return &userStreakServiceClient{cc}
}

func (c *userStreakServiceClient) GetUserStreak(ctx context.Context, in *GetUserStreakRequest, opts ...grpc.CallOption) (*GetUserStreakResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserStreakResponse)
	err := c.cc.Invoke(ctx, UserStreakService_GetUserStreak_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStreakServiceClient) UpdateStreak(ctx context.Context, in *UpdateStreakRequest, opts ...grpc.CallOption) (*UpdateStreakResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStreakResponse)
	err := c.cc.Invoke(ctx, UserStreakService_UpdateStreak_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStreakServiceClient) GetStreakHistory(ctx context.Context, in *GetStreakHistoryRequest, opts ...grpc.CallOption) (*GetStreakHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStreakHistoryResponse)
	err := c.cc.Invoke(ctx, UserStreakService_GetStreakHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStreakServiceClient) ResetStreak(ctx context.Context, in *ResetStreakRequest, opts ...grpc.CallOption) (*ResetStreakResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetStreakResponse)
	err := c.cc.Invoke(ctx, UserStreakService_ResetStreak_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserStreakServiceServer is the server API for UserStreakService service.
// All implementations must embed UnimplementedUserStreakServiceServer
// for forward compatibility.
type UserStreakServiceServer interface {
	GetUserStreak(context.Context, *GetUserStreakRequest) (*GetUserStreakResponse, error)
	UpdateStreak(context.Context, *UpdateStreakRequest) (*UpdateStreakResponse, error)
	GetStreakHistory(context.Context, *GetStreakHistoryRequest) (*GetStreakHistoryResponse, error)
	ResetStreak(context.Context, *ResetStreakRequest) (*ResetStreakResponse, error)
	mustEmbedUnimplementedUserStreakServiceServer()
}

// UnimplementedUserStreakServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserStreakServiceServer struct{}

func (UnimplementedUserStreakServiceServer) GetUserStreak(context.Context, *GetUserStreakRequest) (*GetUserStreakResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStreak not implemented")
}
func (UnimplementedUserStreakServiceServer) UpdateStreak(context.Context, *UpdateStreakRequest) (*UpdateStreakResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStreak not implemented")
}
func (UnimplementedUserStreakServiceServer) GetStreakHistory(context.Context, *GetStreakHistoryRequest) (*GetStreakHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreakHistory not implemented")
}
func (UnimplementedUserStreakServiceServer) ResetStreak(context.Context, *ResetStreakRequest) (*ResetStreakResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetStreak not implemented")
}
func (UnimplementedUserStreakServiceServer) mustEmbedUnimplementedUserStreakServiceServer() {}
func (UnimplementedUserStreakServiceServer) testEmbeddedByValue()                           {}

// UnsafeUserStreakServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserStreakServiceServer will
// result in compilation errors.
type UnsafeUserStreakServiceServer interface {
	mustEmbedUnimplementedUserStreakServiceServer()
}

func RegisterUserStreakServiceServer(s grpc.ServiceRegistrar, srv UserStreakServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserStreakServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserStreakService_ServiceDesc, srv)
}

func _UserStreakService_GetUserStreak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStreakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStreakServiceServer).GetUserStreak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStreakService_GetUserStreak_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStreakServiceServer).GetUserStreak(ctx, req.(*GetUserStreakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStreakService_UpdateStreak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStreakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStreakServiceServer).UpdateStreak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStreakService_UpdateStreak_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStreakServiceServer).UpdateStreak(ctx, req.(*UpdateStreakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStreakService_GetStreakHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreakHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStreakServiceServer).GetStreakHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStreakService_GetStreakHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStreakServiceServer).GetStreakHistory(ctx, req.(*GetStreakHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStreakService_ResetStreak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetStreakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStreakServiceServer).ResetStreak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStreakService_ResetStreak_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStreakServiceServer).ResetStreak(ctx, req.(*ResetStreakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserStreakService_ServiceDesc is the grpc.ServiceDesc for UserStreakService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserStreakService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.user_streak.v1.UserStreakService",
	HandlerType: (*UserStreakServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserStreak",
			Handler:    _UserStreakService_GetUserStreak_Handler,
		},
		{
			MethodName: "UpdateStreak",
			Handler:    _UserStreakService_UpdateStreak_Handler,
		},
		{
			MethodName: "GetStreakHistory",
			Handler:    _UserStreakService_GetStreakHistory_Handler,
		},
		{
			MethodName: "ResetStreak",
			Handler:    _UserStreakService_ResetStreak_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user_streak/v1/user_streak.proto",
}
